/**
 * AI Story Writer - Clean JavaScript Architecture
 * Author: Th√°i B√¨nh D∆∞∆°ng
 * Modern story generator with advanced AI integration
 */

class AIStoryWriter {
    constructor() {
        this.apiKey = '';
        this.currentStory = null;
        this.isGenerating = false;
        
        // Story configuration
        this.genres = {
            'ngon-tinh': {
                name: 'üíï Ng√¥n t√¨nh - Romance ng·ªçt ng√†o',
                description: 'C√¢u chuy·ªán t√¨nh y√™u l√£ng m·∫°n, ng·ªçt ng√†o v√† c·∫£m ƒë·ªông'
            },
            'sac-hiep': {
                name: 'üî• S·∫Øc hi·ªáp - T√¢m l√Ω ng∆∞·ªùi l·ªõn',
                description: 'N·ªôi dung d√†nh cho ng∆∞·ªùi tr∆∞·ªüng th√†nh v·ªõi y·∫øu t·ªë t√¨nh c·∫£m m·∫°nh m·∫Ω'
            },
            'tien-hiep': {
                name: '‚öîÔ∏è Ti√™n hi·ªáp - Tu ti√™n v√µ thu·∫≠t',
                description: 'Th·∫ø gi·ªõi tu ti√™n huy·ªÅn ·∫£o v·ªõi v√µ thu·∫≠t cao c∆∞·ªùng'
            },
            'kinh-di': {
                name: 'üëª Kinh d·ªã - Supernatural horror',
                description: 'C√¢u chuy·ªán kinh d·ªã ƒë·∫ßy k·ªãch t√≠nh v√† b√≠ ·∫©n'
            },
            'hanh-dong': {
                name: 'üéØ H√†nh ƒë·ªông - Action thriller',
                description: 'H√†nh ƒë·ªông gay c·∫•n v·ªõi nh·ªãp ƒë·ªô nhanh'
            }
        };
        
        this.init();
    }
    
    // Initialize application
    init() {
        this.loadStoredData();
        this.setupEventListeners();
        this.setupKeyboardShortcuts();
        
        // Show welcome message if no API key
        if (!this.apiKey) {
            this.showToast('Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Story Writer! Vui l√≤ng c√†i ƒë·∫∑t Gemini API Key ƒë·ªÉ b·∫Øt ƒë·∫ßu.', 'info');
        }
    }
    
    // Load stored data from localStorage
    loadStoredData() {
        try {
            this.apiKey = localStorage.getItem('ai-story-writer-api-key') || '';
            
            if (this.apiKey) {
                const apiKeyInput = document.getElementById('geminiApiKey');
                if (apiKeyInput) {
                    apiKeyInput.value = this.apiKey;
                }
            }
        } catch (error) {
            console.error('Error loading stored data:', error);
            this.showToast('L·ªói khi t·∫£i d·ªØ li·ªáu ƒë√£ l∆∞u', 'error');
        }
    }
    
    // Setup event listeners
    setupEventListeners() {
        // Settings modal
        this.setupSettingsModal();
        
        // Story form
        const storyForm = document.getElementById('storyForm');
        storyForm?.addEventListener('submit', (e) => this.handleStorySubmit(e));
        
        // Story actions
        const continueBtn = document.getElementById('continueStoryBtn');
        continueBtn?.addEventListener('click', () => this.continueStory());
        
        const newStoryBtn = document.getElementById('newStoryBtn');
        newStoryBtn?.addEventListener('click', () => this.newStory());
        
        const copyBtn = document.getElementById('copyStoryBtn');
        copyBtn?.addEventListener('click', () => this.copyStory());
        
        const downloadBtn = document.getElementById('downloadStoryBtn');
        downloadBtn?.addEventListener('click', () => this.downloadStory());
    }
    
    // Setup settings modal functionality
    setupSettingsModal() {
        const settingsBtn = document.getElementById('settingsBtn');
        const settingsModal = document.getElementById('settingsModal');
        const closeBtn = document.getElementById('closeSettingsBtn');
        const cancelBtn = document.getElementById('cancelSettingsBtn');
        const saveBtn = document.getElementById('saveSettingsBtn');
        
        settingsBtn?.addEventListener('click', () => this.openSettings());
        closeBtn?.addEventListener('click', () => this.closeSettings());
        cancelBtn?.addEventListener('click', () => this.closeSettings());
        saveBtn?.addEventListener('click', () => this.saveSettings());
        
        // Close modal when clicking overlay
        settingsModal?.addEventListener('click', (e) => {
            if (e.target === settingsModal) {
                this.closeSettings();
            }
        });
    }
    
    // Setup keyboard shortcuts
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 'Enter':
                        e.preventDefault();
                        if (!this.isGenerating) {
                            if (this.currentStory) {
                                this.continueStory();
                            } else {
                                const form = document.getElementById('storyForm');
                                form?.dispatchEvent(new Event('submit'));
                            }
                        }
                        break;
                    case 's':
                        e.preventDefault();
                        if (this.currentStory) {
                            this.downloadStory();
                        }
                        break;
                    case 'n':
                        e.preventDefault();
                        this.newStory();
                        break;
                }
            }
        });
    }
    
    // Settings management
    openSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.style.display = 'flex';
            setTimeout(() => modal.classList.add('show'), 10);
            
            const apiKeyInput = document.getElementById('geminiApiKey');
            apiKeyInput?.focus();
        }
    }
    
    closeSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => modal.style.display = 'none', 300);
        }
    }
    
    saveSettings() {
        try {
            const apiKeyInput = document.getElementById('geminiApiKey');
            const newApiKey = apiKeyInput?.value.trim();
            
            if (!newApiKey) {
                this.showToast('Vui l√≤ng nh·∫≠p Gemini API Key', 'warning');
                return;
            }
            
            this.apiKey = newApiKey;
            localStorage.setItem('ai-story-writer-api-key', this.apiKey);
            this.showToast('API Key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!', 'success');
            this.closeSettings();
        } catch (error) {
            console.error('Error saving API key:', error);
            this.showToast('L·ªói khi l∆∞u API Key', 'error');
        }
    }
    
    // Story generation
    async handleStorySubmit(e) {
        e.preventDefault();
        
        if (this.isGenerating) return;
        
        const formData = this.getFormData();
        if (!this.validateFormData(formData)) return;
        
        if (!this.apiKey) {
            this.showToast('Vui l√≤ng c√†i ƒë·∫∑t Gemini API Key tr∆∞·ªõc khi t·∫°o truy·ªán', 'warning');
            this.openSettings();
            return;
        }
        
        try {
            this.isGenerating = true;
            this.setLoadingState(true);
            
            const prompt = this.buildStoryPrompt(formData);
            const response = await this.generateStory(prompt);
            const parsedStory = this.parseStoryResponse(response);
            
            this.currentStory = {
                id: Date.now().toString(),
                title: parsedStory.title,
                content: parsedStory.paragraphs,
                genre: formData.genre,
                mainCharacter: formData.mainCharacter,
                originalPrompt: formData.prompt,
                length: formData.length,
                createdAt: new Date().toISOString()
            };
            
            this.displayStory();
            this.showToast('Truy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!', 'success');
            
        } catch (error) {
            console.error('Error generating story:', error);
            this.showToast(`L·ªói: ${error.message}`, 'error');
        } finally {
            this.isGenerating = false;
            this.setLoadingState(false);
        }
    }
    
    // Get form data
    getFormData() {
        return {
            genre: document.getElementById('storyGenre')?.value,
            mainCharacter: document.getElementById('mainCharacter')?.value.trim(),
            prompt: document.getElementById('storyPrompt')?.value.trim(),
            length: document.querySelector('input[name="storyLength"]:checked')?.value
        };
    }
    
    // Validate form data
    validateFormData(data) {
        if (!data.genre) {
            this.showToast('Vui l√≤ng ch·ªçn th·ªÉ lo·∫°i truy·ªán', 'warning');
            return false;
        }
        
        if (!data.prompt) {
            this.showToast('Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng truy·ªán', 'warning');
            return false;
        }
        
        if (!data.length) {
            this.showToast('Vui l√≤ng ch·ªçn ƒë·ªô d√†i truy·ªán', 'warning');
            return false;
        }
        
        return true;
    }
    
    // Build story prompt for AI
    buildStoryPrompt(data) {
        const genre = this.genres[data.genre];
        const lengthInstructions = {
            'short': 'Vi·∫øt 2-3 ƒëo·∫°n vƒÉn ng·∫Øn (kho·∫£ng 300-500 t·ª´)',
            'medium': 'Vi·∫øt 4-6 ƒëo·∫°n vƒÉn trung b√¨nh (kho·∫£ng 600-1000 t·ª´)',
            'long': 'Vi·∫øt 7-10 ƒëo·∫°n vƒÉn d√†i (kho·∫£ng 1000-1500 t·ª´)'
        };
        
        const characterInstruction = data.mainCharacter 
            ? `Nh√¢n v·∫≠t ch√≠nh t√™n "${data.mainCharacter}".`
            : 'T·ª± t·∫°o t√™n nh√¢n v·∫≠t ch√≠nh ph√π h·ª£p.';
        
        return `B·∫°n l√† m·ªôt t√°c gi·∫£ chuy√™n nghi·ªáp vi·∫øt truy·ªán ${genre.description}. 

NHI·ªÜM V·ª§: Vi·∫øt m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh theo y√™u c·∫ßu sau:

TH√îNG TIN:
- Th·ªÉ lo·∫°i: ${genre.name}
- ${characterInstruction}
- √ù t∆∞·ªüng: "${data.prompt}"
- ƒê·ªô d√†i: ${lengthInstructions[data.length]}

Y√äU C·∫¶U VI·∫æT:
1. S·ª≠ d·ª•ng ho√†n to√†n ti·∫øng Vi·ªát t·ª± nhi√™n, ch√≠nh x√°c
2. M·ªói ƒëo·∫°n vƒÉn 3-5 c√¢u, c√≥ √Ω nghƒ©a r√µ r√†ng
3. Mi√™u t·∫£ chi ti·∫øt c·∫£nh v·∫≠t, t√¢m l√Ω nh√¢n v·∫≠t
4. T·∫°o c·ªët truy·ªán h·∫•p d·∫´n, l√¥i cu·ªën
5. K·∫øt th√∫c ƒëo·∫°n ƒë·∫ßu v·ªõi hook ƒë·ªÉ ti·∫øp t·ª•c

ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ:
TITLE: [Ti√™u ƒë·ªÅ hay v√† thu h√∫t]
CONTENT: [N·ªôi dung truy·ªán ƒë∆∞·ª£c chia th√†nh c√°c ƒëo·∫°n vƒÉn r√µ r√†ng]

H√£y vi·∫øt m·ªôt c√¢u chuy·ªán xu·∫•t s·∫Øc!`;
    }
    
    // Generate story using Gemini API
    async generateStory(prompt) {
        if (!this.apiKey) {
            throw new Error('Vui l√≤ng c√†i ƒë·∫∑t Gemini API Key');
        }
        
        try {
            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-goog-api-key': this.apiKey
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.9,
                        topK: 1,
                        topP: 1,
                        maxOutputTokens: 2048,
                    },
                    safetySettings: [
                        {
                            category: "HARM_CATEGORY_HARASSMENT",
                            threshold: "BLOCK_MEDIUM_AND_ABOVE"
                        },
                        {
                            category: "HARM_CATEGORY_HATE_SPEECH", 
                            threshold: "BLOCK_MEDIUM_AND_ABOVE"
                        },
                        {
                            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                            threshold: "BLOCK_ONLY_HIGH"
                        },
                        {
                            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                            threshold: "BLOCK_MEDIUM_AND_ABOVE"
                        }
                    ]
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(this.getApiErrorMessage(response.status, errorData));
            }
            
            const data = await response.json();
            
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ AI');
            }
            
            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            console.error('Gemini API Error:', error);
            throw error;
        }
    }
    
    // Get API error message
    getApiErrorMessage(status, errorData) {
        if (status === 400) {
            return 'API Key kh√¥ng h·ª£p l·ªá ho·∫∑c y√™u c·∫ßu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng';
        } else if (status === 429) {
            return 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù m·ªôt ch√∫t v√† th·ª≠ l·∫°i';
        } else if (status === 403) {
            return 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API';
        } else {
            return errorData.error?.message || `L·ªói API: ${status}`;
        }
    }
    
    // Parse story response from AI
    parseStoryResponse(response) {
        try {
            const lines = response.trim().split('\n');
            let title = '';
            let content = '';
            let inContent = false;
            
            for (const line of lines) {
                if (line.startsWith('TITLE:')) {
                    title = line.replace('TITLE:', '').trim();
                } else if (line.startsWith('CONTENT:')) {
                    content = line.replace('CONTENT:', '').trim();
                    inContent = true;
                } else if (inContent && line.trim()) {
                    content += '\n' + line;
                }
            }
            
            // If no structured format found, treat entire response as content
            if (!title && !content) {
                content = response.trim();
                title = this.generateTitleFromContent(content);
            }
            
            // Split content into paragraphs
            const paragraphs = this.formatContentIntoParagraphs(content || response);
            
            return {
                title: title || 'C√¢u chuy·ªán m·ªõi',
                paragraphs: paragraphs
            };
        } catch (error) {
            console.error('Error parsing story response:', error);
            return {
                title: 'C√¢u chuy·ªán m·ªõi',
                paragraphs: [response.trim()]
            };
        }
    }
    
    // Generate title from content
    generateTitleFromContent(content) {
        const words = content.split(' ').slice(0, 8);
        return words.join(' ') + (content.split(' ').length > 8 ? '...' : '');
    }
    
    // Format content into paragraphs
    formatContentIntoParagraphs(content) {
        if (!content) return [];
        
        // Clean up content
        content = content.trim()
            .replace(/\s+/g, ' ')
            .replace(/\n+/g, ' ');
        
        // Split by sentence patterns and create paragraphs
        const sentences = content.split(/([.!?‚Ä¶]+\s*)/);
        const paragraphs = [];
        let currentParagraph = '';
        let sentenceCount = 0;
        
        for (let i = 0; i < sentences.length; i += 2) {
            const sentence = sentences[i];
            const punctuation = sentences[i + 1] || '';
            
            if (sentence && sentence.trim()) {
                currentParagraph += sentence.trim() + punctuation;
                sentenceCount++;
                
                // Create paragraph break conditions
                const shouldBreak = sentenceCount >= 3 && (
                    sentenceCount >= 5 || // Max 5 sentences per paragraph
                    Math.random() > 0.4 || // Random break 60% chance
                    sentence.length > 200 // Long sentence break
                );
                
                if (shouldBreak) {
                    if (currentParagraph.trim().length > 20) {
                        paragraphs.push(currentParagraph.trim());
                    }
                    currentParagraph = '';
                    sentenceCount = 0;
                } else {
                    currentParagraph += ' ';
                }
            }
        }
        
        // Add remaining content
        if (currentParagraph.trim().length > 20) {
            paragraphs.push(currentParagraph.trim());
        }
        
        return paragraphs.length > 0 ? paragraphs : [content];
    }
    
    // Continue story
    async continueStory() {
        if (!this.currentStory || this.isGenerating) return;
        
        if (!this.apiKey) {
            this.showToast('Vui l√≤ng c√†i ƒë·∫∑t Gemini API Key', 'warning');
            this.openSettings();
            return;
        }
        
        try {
            this.isGenerating = true;
            this.setLoadingState(true, 'continueStoryBtn');
            
            const continuePrompt = this.buildContinuePrompt();
            const response = await this.generateStory(continuePrompt);
            const newParagraphs = this.formatContentIntoParagraphs(response.trim());
            
            // Add new paragraphs to current story
            this.currentStory.content.push(...newParagraphs);
            this.displayStory();
            
            this.showToast('ƒê√£ ti·∫øp t·ª•c c√¢u chuy·ªán!', 'success');
            
        } catch (error) {
            console.error('Error continuing story:', error);
            this.showToast(`L·ªói: ${error.message}`, 'error');
        } finally {
            this.isGenerating = false;
            this.setLoadingState(false, 'continueStoryBtn');
        }
    }
    
    // Build continue prompt
    buildContinuePrompt() {
        const currentContent = this.currentStory.content.join('\n\n');
        const genre = this.genres[this.currentStory.genre];
        
        return `Ti·∫øp t·ª•c c√¢u chuy·ªán ${genre.description} sau ƒë√¢y m·ªôt c√°ch t·ª± nhi√™n v√† h·∫•p d·∫´n:

N·ªòI DUNG HI·ªÜN T·∫†I:
"${currentContent.slice(-800)}..."

Y√äU C·∫¶U:
- Vi·∫øt 2-4 ƒëo·∫°n vƒÉn ti·∫øp theo
- Gi·ªØ t√≠nh nh·∫•t qu√°n v·ªõi n·ªôi dung tr∆∞·ªõc
- Ph√°t tri·ªÉn c·ªët truy·ªán m·ªôt c√°ch logic
- S·ª≠ d·ª•ng ho√†n to√†n ti·∫øng Vi·ªát t·ª± nhi√™n
- T·∫°o t√¨nh hu·ªëng h·∫•p d·∫´n h∆°n

Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung ƒëo·∫°n ti·∫øp theo, kh√¥ng c·∫ßn ti√™u ƒë·ªÅ:`;
    }
    
    // Display story
    displayStory() {
        if (!this.currentStory) return;
        
        const storySection = document.getElementById('storySection');
        const storyContent = document.getElementById('storyContent');
        
        if (!storySection || !storyContent) return;
        
        storyContent.innerHTML = '';
        
        // Display each paragraph with animation
        this.currentStory.content.forEach((paragraph, index) => {
            const div = document.createElement('div');
            div.className = 'story-paragraph';
            div.textContent = paragraph;
            
            setTimeout(() => {
                storyContent.appendChild(div);
                
                // Scroll to new content if continuing story
                if (index === this.currentStory.content.length - 1 && this.currentStory.content.length > 1) {
                    div.scrollIntoView({ behavior: 'smooth', block: 'end' });
                }
            }, index * 150);
        });
        
        storySection.style.display = 'block';
    }
    
    // Create new story
    newStory() {
        this.currentStory = null;
        const storySection = document.getElementById('storySection');
        const form = document.getElementById('storyForm');
        
        if (storySection) storySection.style.display = 'none';
        if (form) {
            form.reset();
            // Reset to default radio button
            const defaultRadio = form.querySelector('input[name="storyLength"][value="short"]');
            if (defaultRadio) defaultRadio.checked = true;
        }
        
        const promptField = document.getElementById('storyPrompt');
        if (promptField) promptField.focus();
    }
    
    // Copy story to clipboard
    async copyStory() {
        if (!this.currentStory) {
            this.showToast('Kh√¥ng c√≥ truy·ªán n√†o ƒë·ªÉ sao ch√©p', 'warning');
            return;
        }
        
        try {
            const content = `${this.currentStory.title}\n\n${this.currentStory.content.join('\n\n')}`;
            await navigator.clipboard.writeText(content);
            this.showToast('ƒê√£ sao ch√©p truy·ªán v√†o clipboard!', 'success');
        } catch (error) {
            console.error('Error copying to clipboard:', error);
            this.showToast('L·ªói khi sao ch√©p truy·ªán', 'error');
        }
    }
    
    // Download story as file
    downloadStory() {
        if (!this.currentStory) {
            this.showToast('Kh√¥ng c√≥ truy·ªán n√†o ƒë·ªÉ t·∫£i xu·ªëng', 'warning');
            return;
        }
        
        try {
            const content = `${this.currentStory.title}\n\n${this.currentStory.content.join('\n\n')}\n\n---\nT·∫°o b·ªüi: AI Story Writer\nT√°c gi·∫£: Th√°i B√¨nh D∆∞∆°ng`;
            const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `${this.currentStory.title.replace(/[^a-zA-Z0-9\s]/g, '')}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            this.showToast('Truy·ªán ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng!', 'success');
        } catch (error) {
            console.error('Error downloading story:', error);
            this.showToast('L·ªói khi t·∫£i xu·ªëng truy·ªán', 'error');
        }
    }
    
    // Set loading state
    setLoadingState(loading, buttonId = 'storyForm') {
        if (buttonId === 'storyForm') {
            const submitBtn = document.querySelector('#storyForm button[type="submit"]');
            if (submitBtn) {
                const btnText = submitBtn.querySelector('.btn-text');
                const btnLoading = submitBtn.querySelector('.btn-loading');
                
                if (loading) {
                    submitBtn.disabled = true;
                    if (btnText) btnText.style.display = 'none';
                    if (btnLoading) btnLoading.style.display = 'flex';
                } else {
                    submitBtn.disabled = false;
                    if (btnText) btnText.style.display = 'flex';
                    if (btnLoading) btnLoading.style.display = 'none';
                }
            }
        } else {
            const button = document.getElementById(buttonId);
            if (button) {
                button.disabled = loading;
                if (loading) {
                    button.style.opacity = '0.7';
                } else {
                    button.style.opacity = '1';
                }
            }
        }
    }
    
    // Show toast notification
    showToast(message, type = 'info') {
        const container = document.getElementById('toastContainer');
        if (!container) return;
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icon = this.getToastIcon(type);
        toast.innerHTML = `<i class="${icon}"></i><span>${message}</span>`;
        
        container.appendChild(toast);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (toast && toast.parentNode) {
                toast.style.animation = 'slideInRight 0.3s ease reverse';
                setTimeout(() => {
                    if (toast && toast.parentNode) {
                        container.removeChild(toast);
                    }
                }, 300);
            }
        }, 5000);
    }
    
    // Get toast icon based on type
    getToastIcon(type) {
        const icons = {
            success: 'fas fa-check-circle',
            error: 'fas fa-exclamation-circle',
            warning: 'fas fa-exclamation-triangle',
            info: 'fas fa-info-circle'
        };
        return icons[type] || icons.info;
    }
}

// Initialize application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.app = new AIStoryWriter();
});